import{extname as t,resolve as e,join as n,parse as s}from"path";import i from"fs-extra";import r from"svgstore";import l from"html-minifier";const o=t=>t?Object.keys(t).reduce(((e,n)=>e+` ${n}="${t[n]}"`),""):"",a=["es","esm","iife","umd"],m={attributes:{html:{lang:"en"}},fileName:"index.html",styles:null,sprite:{input:null,options:{}},nodes:null,innerHTML:"",links:null,meta:[{charset:"utf-8"}],minify:!0,publicPath:"",template:async({attributes:t,files:a,meta:m,links:c,publicPath:p,title:f,nodes:u,innerHTML:d,styles:h,sprite:y,minify:$})=>{const b=(a.js||[]).map((({fileName:e})=>{const n=o(t.script);return`<script src="${/^http/.test(e)?e:`${p}${e}`}"${n}><\/script>`})).join("\n");if(h){a.css||(a.css=[]);const t=h.reduce(((t,{place:e,fileName:n})=>(t[e||"before"].push({fileName:n}),t)),{before:[],after:[]});t.before.length>0&&(a.css=[...t.before,...a.css]),t.after.length>0&&(a.css=[...a.css,...t.after])}const j=c.map((t=>`<link${o(t)}>`)).join("\n"),g=a.css.map((({fileName:e})=>{const n=o(t.link);return`<link href="${/^http/.test(e)?e:`${p}${e}`}" rel="stylesheet"${n}>`})).join("\n"),k=m.map((t=>`<meta${o(t)}>`)).join("\n");u=u?Object.entries(u).map((([t,e])=>`<${t}${o(e)}></${t}>`)).join("\n"):"";const N=y.input?await async function(t,l={}){const o=r(l),a=e(t),m=i.readdirSync(a).filter((t=>".DS_Store"!==t));for(const t of m){const e=i.readFileSync(n(a,t),{encoding:"utf-8"});o.add(s(t).name,e)}return o.toString({inline:l.inline})}(y.input,y.options):"",S=`\n<!doctype html>\n<html${o(t.html)}>\n  <head>\n    ${k}\n    <title>${f}</title>\n    ${j||""}\n    ${g}\n    ${b||""}\n  </head>\n  <body>\n    ${u}\n    ${d}\n    ${N}\n  </body>\n</html>`;return $?l.minify(S,"object"==typeof $?$:{}):S},title:"Rollup Bundle"};var c=(e={})=>{const{attributes:n,fileName:s,meta:i,publicPath:r,template:l,title:o,links:c,styles:p,sprite:f,innerHTML:u,nodes:d,minify:h}=Object.assign({},m,e);return{name:"html",async generateBundle(m,y){a.includes(m.format)||e.template||this.warn(`plugin-html: The output format '${m.format}' is not directly supported. A custom \`template\` is probably required.\n          Supported formats include:\n            ${a.join(", ")}`),"esm"!==m.format&&"es"!==m.format||(n.script=Object.assign({},n.script,{type:"module"}));const $=(e=>{const n=Object.values(e).filter((t=>"chunk"===t.type||("string"==typeof t.type?"asset"===t.type:t.isAsset))),s={};for(const e of n){const{fileName:n}=e,i=t(n).substring(1);s[i]=(s[i]||[]).concat(e)}return s})(y),b={type:"asset",source:await l({attributes:n,bundle:y,files:$,links:c,meta:i,styles:p,sprite:f,nodes:d,innerHTML:u,publicPath:r,title:o,minify:h}),name:"Rollup HTML Asset",fileName:s};this.emitFile(b)}}};export{c as default,o as makeHtmlAttributes};
